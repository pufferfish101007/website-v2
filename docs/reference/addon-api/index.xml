<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Addon API on Scratch Addons</title><link>/docs/reference/addon-api/</link><description>Recent content in Addon API on Scratch Addons</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/docs/reference/addon-api/index.xml" rel="self" type="application/rss+xml"/><item><title>addon.self</title><link>/docs/reference/addon-api/addon.self/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/reference/addon-api/addon.self/</guid><description>Available in userscripts ✔️ Available in persistent scripts ✔️ Required manifest permissions None Description Allows addons to get information about themselves or the browser.
Examples Using addon.self.dir With addon.self.dir, we can get the URL to an image inside the addon&amp;rsquo;s directory.
const img = document.createElement(&amp;#34;img&amp;#34;); img.src = addon.self.dir + &amp;#34;/image.svg&amp;#34;; // Will be something like `chrome-extension://aeepldbjfoihffgcaejikpoeppffnlbd/addons/addon-id/image.</description></item><item><title>addon.settings</title><link>/docs/reference/addon-api/addon.settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/reference/addon-api/addon.settings/</guid><description>Available in userscripts ✔️ Available in persistent scripts ✔️ Required manifest permissions None Description Allows addons to change their behavior according to user-specified addon settings.
Examples Reacting to settings change addon.settings.addEventListener(&amp;#34;change&amp;#34;, function() { console.log(&amp;#34;Settings changed!&amp;#34;); if(addon.settings.get(&amp;#34;removeIdeasBtn&amp;#34;) === true &amp;amp;&amp;amp; tipsButtonShown === false) showTipsButton(); else if(addon.settings.get(&amp;#34;removeIdeasBtn&amp;#34;) === false &amp;amp;&amp;amp; tipsButtonShown === true) hideTipsButton(); }); Methods addon.</description></item><item><title>addon.auth</title><link>/docs/reference/addon-api/addon.auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/reference/addon-api/addon.auth/</guid><description>Available in userscripts ✔️ Available in persistent scripts ✔️ Required manifest permissions None Description Allows addons to get information about the current Scratch account session.
Examples Reacting to auth info change addon.auth.addEventListener(&amp;#34;change&amp;#34;, function() { console.log(addon.auth.isLoggedIn); }); Properties addon.auth.scratchLang Type String Nullable No Language of the Scratch website.
This language option can be changed by the user in the footer of Scratch&amp;rsquo;s website.</description></item><item><title>addon.account</title><link>/docs/reference/addon-api/addon.account/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/reference/addon-api/addon.account/</guid><description>Available in userscripts ✔️ Available in persistent scripts ✔️ Required manifest permissions None Description Allows addons to execute actions in the currently logged in Scratch user.
Methods getMsgCount Return value Promise&amp;lt;Number | null Gets the unread message count of the currently logged in user.
The promise will resolve to null if addon.</description></item><item><title>addon.notifications</title><link>/docs/reference/addon-api/addon.notifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/reference/addon-api/addon.notifications/</guid><description>Available in userscripts ❌ Available in persistent scripts ✔️ Required manifest permissions notifications Description Allows addons to create browser notifications. This API slightly differs from the browser.notifications API extensions can use.
Example General example addon.notifications.create({ type: &amp;#34;basic&amp;#34;, title: &amp;#34;Hello from notification!&amp;#34;, iconUrl: &amp;#34;/images/icon.png&amp;#34;, message: &amp;#34;Hi!&amp;#34;, buttons: [ { title: &amp;#34;Button 1&amp;#34;, }, { title: &amp;#34;Button 2&amp;#34;, }, ], }); addon.</description></item><item><title>addon.badge</title><link>/docs/reference/addon-api/addon.badge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/reference/addon-api/addon.badge/</guid><description>Available in userscripts ❌ Available in persistent scripts ✔️ Required manifest permissions badge Note: currently only one addon (msg-count-badge) can use this API. Do not use it in your addon without discussing on GitHub first.
Description Allows addons to display a badge, a bit of text that is layered over the extension icon, frequently a number.</description></item></channel></rss>